// js/api/gemini.js

async function callGemini(prompt, button) {
    const buttonIcon = button.querySelector('.gemini-icon') || button;
    const originalContent = buttonIcon.innerHTML;
    buttonIcon.innerHTML = `<i class="fas fa-spinner gemini-btn-spinner"></i>`;
    button.disabled = true;

    let chatHistory = [{ role: "user", parts: [{ text: prompt }] }];
    const payload = { contents: chatHistory };

    try {
        const configResponse = await fetch('/api/gemini/config');
        const config = await configResponse.json();

        if (!config.api_key_configured || !config.api_key) {
            console.error("Gemini API key not configured on server.");
            return "Erreur: Cl√© API Gemini non configur√©e sur le serveur.";
        }

        const apiModel = 'gemini-2.0-flash-exp';
        const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/${apiModel}:generateContent?key=${config.api_key}`;

        console.log("ü§ñ [GEMINI API] Prompt:", prompt);

        const response = await fetch(apiUrl, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            let errorMsg = `API request failed with status ${response.status}`;
            try {
                const errorData = await response.json();
                errorMsg += `: ${errorData.error?.message || JSON.stringify(errorData)}`;
            } catch (jsonError) {
                // Ignore
            }
            throw new Error(errorMsg);
        }

        const result = await response.json();

        if (result.candidates && result.candidates[0]?.content?.parts[0]?.text) {
            return result.candidates[0].content.parts[0].text;
        } else {
            throw new Error("Invalid response structure from API");
        }
    } catch (error) {
        console.error("‚ùå [GEMINI API] Call failed:", error);
        return `D√©sol√©, une erreur est survenue: ${error.message}`;
    } finally {
        buttonIcon.innerHTML = originalContent;
        button.disabled = false;
    }
}

async function handleGenerateDescription(event) {
    const button = event.currentTarget;
    const modal = button.closest('.bg-gray-900');
    const nameInput = modal.querySelector('input[type="text"]');
    const descTextarea = modal.querySelector('textarea');
    const locationName = nameInput.value;

    if (!locationName) {
        alert("Veuillez d'abord entrer un nom pour le lieu.");
        return;
    }

    const prompt = `R√©dige une courte description √©vocatrice pour un lieu de la Terre du Milieu nomm√© '${locationName}'. D√©cris son apparence, son atmosph√®re et son histoire possible, dans le style de J.R.R. Tolkien. Sois concis.`;

    const result = await callGemini(prompt, button);
    descTextarea.value = result;
}

async function handleGenerateRegionDescription(event) {
    const button = event.currentTarget;
    const regionName = document.getElementById('edit-region-name').value;
    const descTextarea = document.getElementById('edit-region-desc');

    if (!regionName) {
        alert("Veuillez d'abord entrer un nom pour la r√©gion.");
        return;
    }

    const prompt = `R√©dige une courte description √©vocatrice pour une r√©gion de la Terre du Milieu nomm√©e '${regionName}'. D√©cris son apparence, son climat, sa g√©ographie et son histoire possible, dans le style de J.R.R. Tolkien. Sois concis et √©vocateur.`;

    const result = await callGemini(prompt, button);
    descTextarea.value = result;
}

async function handleGenerateAdventurers(event) {
    const button = event.currentTarget;

    const prompt = `Cr√©e un groupe d'aventuriers pour les Terres du Milieu dans l'Eriador de la fin du Troisi√®me √Çge.

Voici la proc√©dure √† suivre :

a- Choisis al√©atoirement un nombre d'aventurier entre 2 et 5
b- Pour chaque individu du nombre d'aventurier fais les choses suivantes dans l'ordre :
- Choisis un peuple al√©atoirement (parmi : "Hobbits de la Comt√©", "Hommes de Bree", "R√¥deur du Nord", "Elfes du Lindon", "Nains des Montagnes Bleues"). Il faut que cette s√©lection soit r√©ellement al√©atoire.
- Choisis un Nom (dans le style des noms utilis√©s parmi les races de Tolkien, mais sans utiliser de noms trop connus comme Aragorn, Legolas, Frodo, etc)
- Choisis Occupation/r√¥le (garde-forestier, marchand, √©rudit, guerrier, etc.)
- Choisis un lien coh√©rent (famille, ami, coll√®gue, redevable, etc) entre les aventuriers, en faisant en sorte que les aventuriers de races diff√©rentes ne soient pas de la m√™me famille.

Puis d√©cris leur qu√™te ou objectif commun qui les unit dans cette aventure, sans pr√©ciser ce qu'ils devront faire pour l'atteindre. Explique pourquoi ce sont eux et pas d'autres aventuriers qui poursuivent cette qu√™te.

Format de r√©ponse en Markdown:
## Groupe d'aventuriers
[Description de chaque membre avec nom (en gras), peuple (en italique), occupation, lien avec les autres aventuriers]

## Qu√™te
[Description de leur mission commune]

Reste fid√®le √† l'univers de Tolkien, √† la g√©ographie et l'histoire de l'Eriador.`;

    const result = await callGemini(prompt, button);

    const parts = result.split('## Qu√™te');
    if (parts.length === 2) {
        const groupPart = parts[0].replace('## Groupe d\'aventuriers', '').trim();
        const questPart = parts[1].trim();

        const groupTextarea = document.getElementById('adventurers-group');
        const questTextarea = document.getElementById('adventurers-quest');

        if (groupTextarea) groupTextarea.value = groupPart;
        if (questTextarea) questTextarea.value = questPart;

        updateMarkdownContent('adventurers-content', groupPart);
        updateMarkdownContent('quest-content', questPart);

        localStorage.setItem('adventurersGroup', groupPart);
        localStorage.setItem('adventurersQuest', questPart);
        scheduleAutoSync();
    } else {
        const groupTextarea = document.getElementById('adventurers-group');
        if (groupTextarea) groupTextarea.value = result;
        updateMarkdownContent('adventurers-content', result);
        localStorage.setItem('adventurersGroup', result);
        scheduleAutoSync();
    }
}